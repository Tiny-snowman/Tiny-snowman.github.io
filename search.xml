<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>世间所有的相遇，都是久别重逢</title>
    <url>/2021/07/28/trifles/first/</url>
    <content><![CDATA[<h3 id="难言爱恨，事事中庸。"><a href="#难言爱恨，事事中庸。" class="headerlink" title="难言爱恨，事事中庸。"></a><center>难言爱恨，事事中庸。</center></h3><h3 id="回首平生，皆是遗憾。"><a href="#回首平生，皆是遗憾。" class="headerlink" title="回首平生，皆是遗憾。"></a><center>回首平生，皆是遗憾。</center></h3>]]></content>
      <categories>
        <category>trifles</category>
      </categories>
      <tags>
        <tag>trifles</tag>
      </tags>
  </entry>
  <entry>
    <title>差分和前缀和</title>
    <url>/2022/06/25/algorithm/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<p>一维前缀和：sum[i]=sum[i-1]+a[i];<br>二维前缀和：sum[i][j]=sum[i-1][j]+sum[i][j-1]+a[i][j]-sum[i][j];<br>一维  差分：d[i]=a[i]-a[i-1]<br>二维  差分：d[i][j]=a[i][j]+a[i+1][j+1]-a[i-1][j]-a[i][j-1]</p>
<p>下面看几道题：</p>
<p><a href="https://ac.nowcoder.com/acm/problem/21466">道路铺设</a></p>
<p>题意：给一个长度n的数组a, 选择一段连续区间[L, R],让这段区间减1，求最少次数使数组a变为0<br>分析：数组变成0，即差分数组也都为0，我们对差分数组进行操作，区间减一操作可以认为选择两个i, j(i &lt; j)，d[i]–, d[j+1]++, <strong>那么我们结果只取决于差分数组中的正数项</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void slove() &#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)cin &gt;&gt; a[i];</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)d[i] = a[i] - a[i - 1];</span><br><span class="line">    ll ans = 0;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)if (d[i] &gt; 0)ans += d[i];</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codeforces.com/contest/1700/problem/C">Helping the Nature</a></p>
<p>题意：给定一个数组a，你可以执行一下操作<br>（1）另[1, i]减一<br>（2）另[i, n]减一<br>（3）另[1, n]加一<br>问最少多少次可以使数组变成0<br>分析：数组变为0，即差分数组也都为0，则我们考虑操作对差分数组的影响<br>（1）选择一个i-1, 另d[1]–, d[i]++<br>（2）选择一个i-1, 另d[i]–<br>（3）d[1]++<br>那么对于i&gt;1, d[i]&lt;0的数，我们只能通过操作1来把负数转移到d[1]上去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void slove() &#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)cin &gt;&gt; a[i];</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)d[i] = a[i] - a[i - 1];</span><br><span class="line">    int ans = 0;</span><br><span class="line">    for (int i = 2; i &lt;= n; i++) &#123;</span><br><span class="line">        if (d[i] &lt; 0) &#123;</span><br><span class="line">            d[1] += d[i];</span><br><span class="line">            ans -= d[i];</span><br><span class="line">            d[i] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)ans += abs(d[i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.luogu.com.cn/problem/P4552">IncDec Sequence</a></p>
<p>题意：给一个长度为n的数组a, 选择一段区间[L, R]，使这个区间内的数加一或减一，请问至少需要多少次操作才能使数列中的所有数都一样，并求出在保证最少次数的前提下，最终得到的数列有多少种。<br>分析：考虑对差分数组的影响，最后应该使得差分数组2到n项都为0，再看操作，可以使d[L]++, d[R+1]–或d[L]–, d[R+1]++,那我们可以将2到n这一段中和起来，up为正数之和，down为负数之和，选择两者最大即为答案。<a href="https://zhuanlan.zhihu.com/p/513685332">此题解</a>更为详细。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve()</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    long long up = 0, down = 0;</span><br><span class="line">    for(int i = 1; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line">    for(int i = 1; i &lt;= n; i ++) d[i] = a[i]-a[i-1];</span><br><span class="line">    for(int i = 2; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(d[i] &gt; 0) up += d[i];</span><br><span class="line">        else down += abs(d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; max(up, down) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; abs(up - down) + 1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>乘法逆元</title>
    <url>/2022/07/04/algorithm/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</url>
    <content><![CDATA[<p>(a + b) % p = (a%p + b%p) %p （对）<br>(a - b) % p = (a%p - b%p) %p （对）<br>(a * b) % p = (a%p * b%p) %p （对）<br>(a / b) % p = (a%p / b%p) %p （错）</p>
<p>在求余的过程中我们发现只有除法是不能分开运算的，而当a过大时，在计算除法过程中可能会造成比较大的精度损失，所以对于这种情况我们一般会把式子转换成那么(a / b) % p = (a * inv(b) ) % p = (a % p * inv(b) % p) % p来进行计算。这样就解决了除法不能分开计算的问题。</p>
<p>费马小定理</p>
<p>在模数p为素数的前提下，a^(p-1) ≡ 1 (mod p)<br>将费马小定理变形一下 -&gt; a^(p-2) ≡ a^-1 (mod p)<br>由此可得，a的逆元就是 a^(p-2) (mod p)<br>所以，用快速幂求出a^(p-2)的结果就行了；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//a的b次方求余p </span><br><span class="line">LL pow(LL a, LL b, LL p)&#123;</span><br><span class="line">    LL x = 1;</span><br><span class="line">    while(b)&#123;</span><br><span class="line">        if(b &amp; 1) x = (x * a) % p;</span><br><span class="line">        a = (a * a) % p;</span><br><span class="line">        b &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line">//费马求a关于b的逆元 </span><br><span class="line">LL Fm(LL a, LL p)&#123;</span><br><span class="line">        return pow(a, p-2, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>扩展欧几里得</p>
<p>由 a * x ≡ 1(mod p)  得 a * x ≡ yy * p +1  令y=-yy, b = p;<br>推出：ax + by =  1  （注意：前提gcd(a,b) == 1）<br>然后用扩欧解方程即可，得出来的 x 就是 a 在mod p 意义下的逆元</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void exgcd(LL a,LL b,LL &amp;x,LL &amp;y,LL &amp;d)&#123;</span><br><span class="line">    if(b==0)  d=a,x=1,y=0;</span><br><span class="line">    else  exgcd(b,a%b,x,y,d),t=x,x=y,y=t-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line">LL inv(LL t, LL p)&#123;//如果不存在，返回-1 </span><br><span class="line">    LL d, x, y;</span><br><span class="line">    ex_gcd(t, p, x, y, d);</span><br><span class="line">    return d == 1 ? (x % p + p) % p : -1;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    LL a, p;</span><br><span class="line">    while(~scanf(&quot;%lld%lld&quot;, &amp;a, &amp;p))&#123;</span><br><span class="line">        printf(&quot;%lld\n&quot;, inv(a, p));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>小例题：<br><a href="https://ac.nowcoder.com/acm/contest/11226/D">梵</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long</span><br><span class="line">#define mod 998244353</span><br><span class="line">const ll cc=(mod+1)/2ll;// 2*x ≡ 1 (mod mod)</span><br><span class="line">const ll dd=(mod+1)/6ll;</span><br><span class="line">ll n;</span><br><span class="line">ll  a, b;</span><br><span class="line">ll dfs(ll n)</span><br><span class="line">&#123;</span><br><span class="line">    return ((a+b)*(n+1ll)%mod*n%mod*cc%mod - n*(n+1ll)%mod*(2ll*n+1ll)%mod*dd%mod - a*b%mod*n%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for(int i = 1; i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cout &lt;&lt; (dfs(b) - dfs(a)+mod)%mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://ac.nowcoder.com/acm/contest/11228/F">平均题</a></p>
<p>分析：aveg = sum1/1 + sum2/2 + … + sumn/n;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define ll long long</span><br><span class="line">const ll p = 1e9 + 7;</span><br><span class="line">ll n, a[100005], b[100005], ans;</span><br><span class="line">ll iva(ll a, ll b, ll mod)</span><br><span class="line">&#123;</span><br><span class="line">    ll x = 1;</span><br><span class="line">    while (mod)</span><br><span class="line">    &#123;</span><br><span class="line">        if (mod &amp; 1)</span><br><span class="line">            x = (x * b) % p;</span><br><span class="line">        b = (b * b) % p;</span><br><span class="line">        mod &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return a%p*x%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i], b[i] = (b[i - 1] % p + a[i] % p) % p;</span><br><span class="line">    int end = (n + 1) / 2;</span><br><span class="line">    ll sum = 0;</span><br><span class="line"></span><br><span class="line">    if (n &amp; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = 1; i &lt; end; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += (b[n-i+1]%p-b[i-1]%p+p)%p;</span><br><span class="line">            ans += iva(sum, i, p-2) % p;</span><br><span class="line">            ans += iva(sum, n-i+1, p-2) % p;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        sum += (b[end]%p-b[end-1]%p+p)%p;</span><br><span class="line">        ans += iva(sum, end, p-2) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        for (int i = 1; i &lt;= end; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += (b[n-i+1]%p-b[i-1]%p+p)%p;</span><br><span class="line">            ans += iva(sum, i, p-2) % p;</span><br><span class="line">            ans += iva(sum, n-i+1, p-2) % p;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans % p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划之经典问题</title>
    <url>/2022/06/01/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(int i = 1; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">    dp[i] = 1;</span><br><span class="line">    for(int j = i-1; j; j --)</span><br><span class="line">    &#123;   </span><br><span class="line">        //最长不下降子序列</span><br><span class="line">        if(a[j] &lt;= a[i]</span><br><span class="line">        dp[i] = max(dp[i], dp[j]+1);</span><br><span class="line">        //最长不上升子序列</span><br><span class="line">        if(a[j] &gt;= a[i])</span><br><span class="line">        dp[i] = max(dp[i], dp[j]+1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分做法（O-nlogn"><a href="#二分做法（O-nlogn" class="headerlink" title="二分做法（O(nlogn))"></a>二分做法（O(nlogn))</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memset(b, 0x3f3f, sizeof b);</span><br><span class="line">memset(c, -0x3f3f, sizeof c);</span><br><span class="line">for (int i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    //在下降的序列中寻找小于arr[i]的数</span><br><span class="line">    *upper_bound(c + 1, c + 1 + n, arr[i], greater&lt;int&gt;()) = arr[i];</span><br><span class="line">    *lower_bound(b + 1, b + 1 + n, arr[i]) = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">//最长下降长度</span><br><span class="line">cout &lt;&lt; lower_bound(c + 1, c + n + 1, c[0], greater&lt;int&gt;()) - c - 1 &lt;&lt; endl;</span><br><span class="line">//最长上升长度</span><br><span class="line">cout &lt;&lt; lower_bound(b + 1, b + 1 + n, b[0]) - b - 1 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫环</title>
    <url>/2021/07/28/algorithm/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
    <content><![CDATA[<p><strong>递归方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int ysf(int n, int m, int i)</span><br><span class="line">//有n个人，报道数字k时出局，第i个人出局的编号</span><br><span class="line">&#123;</span><br><span class="line">    if(i == 1) return (m-1+n)%n;</span><br><span class="line">    return (ysf(n-1, m, i-1)+m)%n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>链表写法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">list&lt;int&gt; li;</span><br><span class="line">int cnt, num;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    for(int i = 1; i &lt;= m; i ++) li.push_back(i);</span><br><span class="line">    list&lt;int&gt; ::iterator it = li.begin();</span><br><span class="line">    int f = 0;</span><br><span class="line">    while(li.size() != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        num ++;</span><br><span class="line">        if(f) it ++;</span><br><span class="line">        f = 1;</span><br><span class="line">        if(it == li.end()) it = li.begin();</span><br><span class="line">        if(num == n)</span><br><span class="line">        &#123;</span><br><span class="line">            it = li.erase(it);</span><br><span class="line">            f = 0;</span><br><span class="line">            num = 0;</span><br><span class="line">            if(it == li.end()) it = li.begin(), f = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    it = li.begin();</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>手写循环链表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n, m;</span><br><span class="line"></span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">	/* data */</span><br><span class="line">	int data;</span><br><span class="line">	struct node* next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">void ysf(int n, int m)</span><br><span class="line">&#123;</span><br><span class="line">	Node *head = NULL, *p = NULL, *r = NULL;</span><br><span class="line">	head = (Node*)malloc(sizeof(Node));</span><br><span class="line">	head-&gt;data = 1;</span><br><span class="line">	head-&gt;next = NULL;</span><br><span class="line">	p = head;</span><br><span class="line">	for(int i = 2; i &lt;= n; i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		r = (Node*)malloc(sizeof(Node));</span><br><span class="line">		r-&gt;data = i;</span><br><span class="line">		r-&gt;next = NULL;</span><br><span class="line">		p-&gt;next = r;</span><br><span class="line">		p = r;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next = head;</span><br><span class="line">	p = head;</span><br><span class="line">	while(p-&gt;next != p)</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i = 1; i &lt; m; i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			r = p;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		r-&gt;next = p-&gt;next;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; p-&gt;data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	ysf(n, m);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2022/06/23/note/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>单例模式的优点：由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p>
<p>饿汉式</p>
<ul>
<li>坏处：对象加载时间过长</li>
<li>好处：线程安全</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Bank bank1 = Bank.getBank();</span><br><span class="line">        Bank bank2 = Bank.getBank();</span><br><span class="line">        System.out.println(bank1 == bank2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Bank&#123;</span><br><span class="line">    private Bank()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    private static Bank bank = new Bank();</span><br><span class="line">    public static Bank getBank()&#123;</span><br><span class="line">        return bank;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>懒汉式:</p>
<ul>
<li>坏处：线程不安全</li>
<li>好处：延迟对象的创建</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class singleton2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Order order1 = Order.getInstance();</span><br><span class="line">        Order order2 = Order.getInstance();</span><br><span class="line">        System.out.println(order1 == order2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Order&#123;</span><br><span class="line">    private Order()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    private static Order instance = null;</span><br><span class="line">    public static Order getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new Order();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>jave基础 学习之旅</title>
    <url>/2022/06/24/note/jave%E5%9F%BA%E7%A1%80%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<hr>
<h3 id="Java的基本程序设计结构"><a href="#Java的基本程序设计结构" class="headerlink" title="Java的基本程序设计结构"></a>Java的基本程序设计结构</h3><hr>
<p><strong>类名</strong>：必须以字母开头，后面可以跟字母和数字的任意组合<br><strong>数据类型</strong>：</p>
<ul>
<li>int 4字节</li>
<li>short 2字节</li>
<li>long 8字节</li>
<li>byte 1字节</li>
<li>float 4字节</li>
<li>double 8字节 </li>
<li>无穷大 Double.POSITIVE_INTINITY  无穷小 Double.NEGATIVE_INFINITY 不是数字 NaN</li>
<li>eg: 0.125 = 2^-3  0x1.0p-3，尾数采用十六进制，指数采用十进制，指数的基数是2</li>
</ul>
<p><strong>常量</strong>：</p>
<ul>
<li>final 只能在方法中定义</li>
<li>public static final 类常量，所有方法都可以使用</li>
</ul>
<p><strong>运算符</strong></p>
<ul>
<li>整数被0除产生异常，浮点数被0除得到无穷大或NaN</li>
<li>三目运算符 condition ？ expression1 : expression2</li>
<li>+=是右结合运算符 eg: a += b += c 等价于 a += (b += c)</li>
</ul>
<p><strong>字符串</strong></p>
<ul>
<li>string类没有提供修改字符串某个字符的方法</li>
<li>substring(a, b) [a, b)</li>
<li>检测字符串是否相等 s.equals(t) or s.compareT0(t) == 0</li>
<li>null 串</li>
<li>format 方法创建一个格式化的字符串</li>
</ul>
<p><strong>大数</strong></p>
<ul>
<li>BigInteger BigDecimal</li>
<li>value0f 将普通的数转化为大数</li>
<li>add subtract multiply divide mod</li>
</ul>
<p><strong>数组</strong></p>
<ul>
<li>允许长度为0的数组 new elementType[0]</li>
<li>for (variable : collection) statement，collection 这一集合必须是一个数组或者是一个实现了iterable接口的类对象</li>
<li>深拷贝Arrays.copy0f(xxx[] a, int end), Arrays.copy0fRange(xxx[] a, int start, int end)</li>
<li>sort(xxx[] a)</li>
<li>binarySearch(xxx[] a, xxx v)找到返回下标，否者返回一个负数r, -r-1是应该插入的位置</li>
</ul>
<hr>
<h3 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h3><hr>
<p><strong>对象</strong></p>
<ul>
<li>任何对象变量的值都是对存储在另外一个地方的某个对象的引用</li>
</ul>
<p><strong>构造器</strong></p>
<ul>
<li>构造器的名字应该于类名相同</li>
<li>构造器没有返回值</li>
<li>构造器总是结合new运算符来调用，不能对一个已经存在的对象调用构造器来达到重新设置实例字段的目的</li>
</ul>
<p><strong>var关键字</strong></p>
<ul>
<li>var关键字只能用于方法中的局部变量</li>
</ul>
<p><strong>隐士参数</strong></p>
<ul>
<li>在每个方法中，关键字this总是指向隐士参数</li>
</ul>
<p><strong>final实例字段</strong></p>
<ul>
<li>将实例字段定义为final，这样的字段必须在构造对象时初始化</li>
<li>对于可变的类，使用final修饰符可能会造成混乱 eg evaluations = new StringBuilder(); final关键字只是表示存储在evaluations变量中的对象引用不会在指示另一个不同的StringBuilder对象，不过这个对象可以更改</li>
</ul>
<p><strong>静态字段</strong></p>
<ul>
<li>每个类只有一个这样的字段</li>
<li>属于类，而不属于任何单个的对象 eg private static int nexted = 1;</li>
</ul>
<p><strong>静态常量</strong></p>
<ul>
<li>eg public static final double PI = 3.1415926</li>
<li>如果省略关键字static，PI就变成了Math类的一个实例字段，也就是说，需要通过Math类的一个对象来访问PI，并且每个Math对象都有它自己的一个PI副本</li>
</ul>
<p><strong>静态方法</strong></p>
<ul>
<li>不是在对象上执行的方法，没有隐士参数</li>
<li>静态方法可以访问静态字段</li>
<li>使用类名而不是对象来调用静态方法 </li>
</ul>
<p><strong>方法参数</strong></p>
<ul>
<li>按值调用（不修改原来的值），按引用调用（原来的值改变）</li>
<li>java对对象的引用采用的不是按引用调用，实际上，对象引用是按值传递的</li>
<li>方法不能修改基本数据类型的参数（即数值型或布尔型）</li>
<li>方法可以改变对象参数的状态</li>
<li>方法不能让一个对象参数引用一个新的对象</li>
</ul>
<p><strong>初始化块</strong></p>
<ul>
<li>只要构造这个类的对象，这些块就会被执行</li>
<li>首先运行初始化块，然后才运行构造器的主体部分</li>
</ul>
<p><strong>静态导入</strong></p>
<ul>
<li>eg import static java.lang.System.*;可以使用System类的静态方法和静态字段，而不必加类名前缀</li>
<li>在包中增加类 package com.horstamnn.corejava;  </li>
</ul>
<hr>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><hr>
<p><strong>子类构造器</strong></p>
<ul>
<li>使用super调用构造器的语句必须是子类构造器的第一条语句</li>
</ul>
<p><strong>方法的调用</strong></p>
<ul>
<li>在覆盖一个方法的时候，子类方法不能低于超类方法的可见性</li>
<li>覆盖方法（子类的方法）的参数列表必须与Overridden方法（父类的方法）匹配。参数的数据类型及其顺序应完全匹配。</li>
</ul>
<p><strong>阻止继承</strong></p>
<ul>
<li>将一个类声明为final，只有其中的方法自动地成为final，而不包括字段</li>
</ul>
<p><strong>强制类型转换</strong></p>
<ul>
<li>只能在继承层次进行强制类型转换</li>
<li>再将超类强制转换成子类之前，应该使用instanceof进行检查</li>
<li>result = object instanceof class，如果 object 是 class 的一个实例，则 instanceof 运算符返回 true。如果 object 不是指定类的一个实例，或者 object 是 null，则返回 false。</li>
</ul>
<p><strong>抽象类</strong></p>
<ul>
<li>抽象类不能实例化</li>
<li>包含一个或多个抽象方法的类本身必须被声明为抽象的</li>
</ul>
<p><strong>修饰符</strong></p>
<ul>
<li>仅对本类可见————private</li>
<li>对外部完全可见————public</li>
<li>对本包和所有子类可见————protected</li>
<li>对本包可见————默认，不需要修饰符</li>
</ul>
<p><strong>equals方法</strong></p>
<ul>
<li>Object类中实现地equals方法将确定两个对象<strong>引用</strong>是否相等</li>
</ul>
<p><strong>toString方法</strong></p>
<ul>
<li>Object类定义了toString方法，可以打印对象地类名和散列码</li>
</ul>
<p><strong>泛型数组列表</strong></p>
<ul>
<li>ArrayList<E>(int initialCapacity)</li>
<li>add, set, get set方法只是用来替换数组中已经加入的元素</li>
<li>尖括号中的类型参数不允许是基本类型</li>
</ul>
<p><strong>自动装箱的规范要求</strong></p>
<ul>
<li>装箱和拆箱是编译器要做的工作，而不是虚拟机，编译器再生成类的字节码时会插入必要的方法调用，虚拟机只执行这些字节码</li>
<li>boolean, byte, char&lt;=127, 介于-128和127之间的short和int被包装到固定的对象中</li>
<li>如果在一个条件表达式中混合使用Integer和Double类型，Integer值就会拆箱，提升为double，在装箱为Double</li>
</ul>
<p><strong>参数可变的方法</strong></p>
<ul>
<li>eg:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static double dmax(double... value)</span><br><span class="line">&#123;</span><br><span class="line">    double lar = Double.NEGATIVE_INFINITY;</span><br><span class="line">    for(double s : value)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s &gt; lar) lar = s;</span><br><span class="line">    &#125;</span><br><span class="line">    return lar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>枚举类</strong></p>
<ul>
<li>public enum Size{SMALL, MEDIUM, LARGE, EXTRA_LARGE}声明定义的类型是一个类， 有4个实例，不可能构造新的对象，比较时直接用==</li>
<li>枚举类型增加构造器，方法和字段，构造器只在构造枚举常量的时候调用</li>
<li>枚举的构造器总是私有的</li>
</ul>
<hr>
<h3 id="接口，lambda表达式与内部类"><a href="#接口，lambda表达式与内部类" class="headerlink" title="接口，lambda表达式与内部类"></a>接口，lambda表达式与内部类</h3><hr>
<p><strong>接口</strong></p>
<ul>
<li>接口中的所有方法都自动是public方法</li>
<li>成员变量：只能是常量。默认修饰符：public static final</li>
<li>接口绝不会有实例字段，在Java8之前，接口绝不会实现方法</li>
<li>接口能够声明接口的变量，但接口变量必须引用实现了这个接口的类对象</li>
<li>如果同时实现两个接口，接口中定义了一样的默认方法，必须重写，不然会报错。（接口冲突）</li>
<li>接口中定义的静态方法，只能通过接口来调用</li>
<li>通过实现类的对象，可以调用接口中的默认方法</li>
<li>在子类或实现类的方法中调用接口中方法：接口.super.方法</li>
</ul>
<p><strong>接口和抽象类的异同</strong></p>
<ul>
<li>抽象类又构造方法，接口没有</li>
<li>都不能够有实例对象</li>
<li>接口的变量只能是常量，抽象类可以是变量也可以是常量</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
